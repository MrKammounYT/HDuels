plugins {
    id 'java'
    id "com.gradleup.shadow" version "9.0.0-beta4"

}

group = 'com.kammoun'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = 'minecraft-repo'
        url = 'https://libraries.minecraft.net/'
        // this lets gradle know where to look for authlib
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.codemc.io/repository/maven-snapshots/' } // CodeMC Snapshots repository
    maven { url 'https://jitpack.io' }
    maven {
        name = "CodeMC"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }

}

dependencies {
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'com.mojang:authlib:1.5.21'
    implementation 'net.wesjd:anvilgui:1.10.4-SNAPSHOT'
    implementation 'com.zaxxer:HikariCP:6.2.1'
    compileOnly("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly 'com.github.koca2000:NoteBlockAPI:1.6.2'
    implementation("de.tr7zw:item-nbt-api:2.14.1")


}

def targetJavaVersion = 21
shadowJar {
    archiveBaseName.set('HDuels')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('all')
    mergeServiceFiles()
    destinationDirectory.set(file("C:/Users/ahmed/OneDrive/Desktop/MC SERVERS/server 1.21/plugins"))
}
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
